import speech_recognition as sr
import RPi.GPIO as GPIO
import time
import os
from urllib.parse import urlencode
from gtts import gTTS
from selenium import webdriver
from time import sleep
from selenium.common.exceptions import NoSuchElementException
import alsaaudio

#tts = gTTS(text='Searching', lang='en')
#tts.save("searchterm.mp3")

#tts = gTTS(text='Playing Next Song!!!!', lang='en')
#tts.save("nextMusic.mp3") 

#tts = gTTS(text='Say your command', lang='en')
#tts.save("command.mp3")

#tts = gTTS(text='Playing Previous Song!!!!', lang='en')
#tts.save("prevMusic.mp3")

xpaths = { 'nextButton' : ".//*[@id='nextbutton']",
           'prevButton' : ".//*[@id='prevbutton']",
           'playpause' : ".//*[@id='playpause']"
         }

r = sr.Recognizer()
m = sr.Microphone()

#GPIO pin setup for button
buttonPin = 23

#set up GPIO using BCM numbering
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

#enable LED and button (button with pull-up)
GPIO.setup(buttonPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

mydriver = webdriver.Firefox()

t = alsaaudio.Mixer('PCM')
t.setvolume(100)

while (True):
    if GPIO.wait_for_edge(buttonPin, GPIO.FALLING):

        with m as source: r.adjust_for_ambient_noise(source)
                
        os.system("omxplayer command.mp3")
        print("say a command: ")
        current_volume = t.getvolume()
        current_volume = int(current_volume[0])
        t.setvolume(50)
	   
        with m as source: audio = r.listen(source)
        print("Got it! Recognizing...")
        try:
            # recognize speech using Google Speech Recognition
            value = r.recognize_google(audio)

            # we need some special handling here to correctly print unicode characters to standard output
            if str is bytes:  # this version of Python uses bytes for strings (Python 2)
                print("You said {}".format(value).encode("utf-8"))
            else:  # this version of Python uses unicode for strings (Python 3+)
                print("You said {}".format(value))

            if(value.startswith("search") or value.startswith("find")):
                str = value.split(' ',1)
                if(len(str) < 2):
                   print("error")
                else:
                   term= str[1]
                   print("Searching for keywords \"{}\"".format(term))
                   mydict = {'searchTerm': term}
                   qstr = urlencode(mydict)

                   baseurl = "http://localhost/player.html?"
                   mydriver.get(baseurl + qstr)
                   sleep(10)

                   
            elif(value == 'Next' or value == 'next' or value == 'text'):
                mydriver.find_element_by_xpath(xpaths['nextButton']).click()
                os.system("omxplayer nextMusic.mp3")
                print("next song!!!")

            elif(value == 'Previous' or value == 'previous' or value == 'pervious'or value == 'back'):
                mydriver.find_element_by_xpath(xpaths['prevButton']).click()
                os.system("omxplayer prevMusic.mp3")
                print("previous song!!!")

            elif(value == 'Play' or value == 'play' or value == 'pause' or value == 'Pause' or value == 'cause' or value == 'Cause'):
                mydriver.find_element_by_xpath(xpaths['playpause']).click()
                
        except sr.UnknownValueError:
            print("Oops! Didn't catch that")
        except sr.RequestError as e:
            print("Uh oh! Couldn't request results from Google Speech Recognition service; {0}".format(e))
        except KeyboardInterrupt:
            pass
        finally:
            t.setvolume(current_volume)
	 	
